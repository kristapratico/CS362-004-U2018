        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#define TESTFUNCTION "fullDeckCount()"
        -:   10:
        -:   11:// Counters for number of tests and failed tests
        -:   12:int numFailedTests = 0;
        -:   13:int numTests = 0;
        -:   14:
        -:   15:// custom assert 
        4:   16:void assertTF(int value1, int value2) {
        4:   17:    if (value1 == value2) {
        4:   18:        printf("PASSED\n");
        -:   19:    }
        -:   20:    else {
    #####:   21:        printf("FAILED\n");
    #####:   22:        numFailedTests++;
        -:   23:    }
        4:   24:}
        -:   25:
        1:   26:int main () {
        1:   27:    int numPlayers = 2;
        1:   28:    int player0 = 0; 
        -:   29:
        -:   30:    // kingdom cards in use
        1:   31:    int k[10] = {adventurer, minion, feast, gardens, mine,
        -:   32:               tribute, smithy, village, baron, treasure_map};
        -:   33:
        1:   34:    int seed = 99;
        -:   35:
        -:   36:    // state to use for init game and beginningState to check if state changed
        -:   37:    struct gameState state;
        -:   38:
        -:   39:    // create a game state
        1:   40:    initializeGame(numPlayers, k, seed, &state);
        -:   41:
        1:   42:    printf("----------------- Testing Function: %s ----------------\n", TESTFUNCTION);
        -:   43:    
        -:   44:    // TEST 1: Enumerating Gardens, none present in hand, discard, or deck
        1:   45:    numTests++;
        1:   46:    printf("\nTEST 1: Count Gardens, zero present in hand, deck, or discard\n");
        1:   47:    printf("Zero gardens counted: ");
        1:   48:    assertTF(fullDeckCount(player0, gardens, &state), 0);
        -:   49:
        -:   50:    // TEST 2: Enumerating Gardens, five gardens in deck
        1:   51:    numTests++;
        1:   52:    printf("\nTEST 2: Count Gardens, deck: 5; hand: 0; discard: 0\n");
        6:   53:    for (int i = 0; i < 5; i++)
        5:   54:        state.deck[player0][i] = gardens;
        1:   55:    printf("Five gardens counted: ");
        1:   56:    assertTF(fullDeckCount(player0, gardens, &state), 5);
        -:   57:
        -:   58:    // TEST 3: Enumerating Gardens, five gardens in deck and 4 in hand
        1:   59:    numTests++;
        1:   60:    printf("\nTEST 3: Count Gardens, deck: 5; hand: 4; discard: 0\n");
        5:   61:    for (int i = 0; i < 4; i++)
        4:   62:        state.hand[player0][i] = gardens;
        1:   63:    printf("Nine gardens counted: ");
        1:   64:    assertTF(fullDeckCount(player0, gardens, &state), 9);
        -:   65:
        -:   66:    // TEST 4: Enumerating Gardens, five gardens in deck, 4 in hand, 1 in discard
        1:   67:    numTests++;
        1:   68:    printf("\nTEST 4: Count Gardens, deck: 5; hand: 4; discard: 1\n");
        1:   69:    state.discard[player0][0] = gardens;
        1:   70:    state.discardCount[player0] = 1;
        1:   71:    printf("Ten gardens counted: ");
        1:   72:    assertTF(fullDeckCount(player0, gardens, &state), 10);
        -:   73:
        -:   74:
        1:   75:    printf("\n----End Tests for %s----\n", TESTFUNCTION);
        1:   76:    printf("\nNumber of Tests Ran: %d\n", numTests);
        -:   77:    
        1:   78:    if (numFailedTests == 0) {
        1:   79:        printf("All tests for %s PASSED\n", TESTFUNCTION);
        -:   80:    }
        -:   81:    else {
    #####:   82:        printf("Number of Tests Failed: %d\n", numFailedTests);
        -:   83:    }
        -:   84:
        1:   85:    return 0;
        -:   86:}

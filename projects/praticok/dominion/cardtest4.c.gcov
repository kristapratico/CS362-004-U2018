        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#define TESTCARD "village"
        -:   10:
        -:   11:// Counters for number of tests and failed tests
        -:   12:int numFailedTests = 0;
        -:   13:int numTests = 0;
        -:   14:
        -:   15:// custom assert 
       19:   16:void assertTF(int value1, int value2) {
       19:   17:    if (value1 == value2) {
       19:   18:        printf("PASSED\n");
        -:   19:    }
        -:   20:    else {
    #####:   21:        printf("FAILED\n");
    #####:   22:        numFailedTests++;
        -:   23:    }
       19:   24:}
        -:   25:
        1:   26:int main () {
        1:   27:    int numPlayers = 2;
        1:   28:    int player0 = 0;
        1:   29:    int player1 = 1;
        1:   30:    int handPos = 0;
        1:   31:    int discard = 1;
        -:   32:    int choice1, choice2, choice3;
        1:   33:    choice1 = choice2 = choice3 = 0;
        1:   34:    int bonus = 0;
        -:   35:
        -:   36:    // kingdom cards in use
        1:   37:    int k[10] = {adventurer, minion, feast, gardens, mine,
        -:   38:               tribute, smithy, village, baron, council_room};
        -:   39:
        1:   40:    int seed = 99;
        -:   41:
        -:   42:    // state to use for init game and beginningState to check if state changed
        -:   43:    struct gameState state, beginningState;
        -:   44:
        -:   45:    // create a game state
        1:   46:    initializeGame(numPlayers, k, seed, &state);
        -:   47:
        1:   48:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   49:
        1:   50:    memcpy(&beginningState, &state, sizeof(struct gameState));
        1:   51:    cardEffect(village, choice1, choice2, choice3, &state, handPos, &bonus);
        -:   52:
        -:   53:    // TEST 1: Current player receives exactly 1 card
        1:   54:    numTests++;
        1:   55:    printf("TEST 1: Player0 plays village and receives exactly 1 card\n");
        1:   56:    printf("Player0 gains 1 card: ");
        1:   57:    assertTF(state.handCount[player0], beginningState.handCount[player0] + 1 - discard);
        -:   58:
        -:   59:    // TEST 2: Check if village card is recorded as played
        1:   60:    numTests++;
        1:   61:    printf("\nTEST 2: Check if village card was recorded as played\n");
        1:   62:    printf("village card was recorded as played: ");
        1:   63:    assertTF(state.playedCardCount, beginningState.playedCardCount + 1);
        -:   64:
        -:   65:    // TEST 3: Current player gained 1 card from his own pile
        1:   66:    numTests++;
        1:   67:    printf("\nTEST 3: Player0 gained 1 card from his own pile\n");
        1:   68:    printf("Player0 drew 1 card from his own pile: ");
        1:   69:    assertTF(state.deckCount[player0], beginningState.deckCount[player0] - 1);
        -:   70:
        -:   71:    // TEST 4: Current player receives +2 actions
        1:   72:    numTests++;
        1:   73:    printf("\nTEST 4: Player0 gains +2 actions\n");
        1:   74:    printf("Player0 gains +2 actions: ");
        1:   75:    assertTF(state.numActions, beginningState.numActions + 2);
        -:   76:
        -:   77:    // TEST 5: No state change occurs for other player
        1:   78:    numTests++;
        1:   79:    printf("\nTEST 5: No state change occurs for player1\n");
        1:   80:    printf("Player1 hand count was not changed: ");
        1:   81:    assertTF(state.handCount[player1], beginningState.handCount[player1]);
        1:   82:    printf("Player1 deck count was not changed: ");
        1:   83:    assertTF(state.deckCount[player1], beginningState.deckCount[player1]);
        -:   84:
        -:   85:    // TEST 6: No state change occurs to the victory card piles
        1:   86:    numTests++;
        1:   87:    printf("\nTEST 6: No state change occurs to victory card piles\n");
        1:   88:    printf("Estate pile unchanged: ");
        1:   89:    assertTF(state.supplyCount[estate], beginningState.supplyCount[estate]);
        1:   90:    printf("Duchy pile unchanged: ");
        1:   91:    assertTF(state.supplyCount[duchy], beginningState.supplyCount[duchy]);
        1:   92:    printf("Province pile unchanged: ");
        1:   93:    assertTF(state.supplyCount[province], beginningState.supplyCount[province]);
        -:   94:
        -:   95:    // TEST 7: No state change occurs to the kingdom card piles
        1:   96:    numTests++;
        1:   97:    printf("\nTEST 7: No state change occurs to kingdom card piles\n");
       11:   98:    for (int x = 0; x < 10; x++) {
       10:   99:        printf("Card %d: ", x);
       10:  100:        assertTF(state.supplyCount[k[x]], beginningState.supplyCount[k[x]]);
        -:  101:    }
        -:  102:
        1:  103:    printf("\n----End Tests for %s----\n", TESTCARD);
        1:  104:    printf("\nNumber of Tests Ran: %d\n", numTests);
        -:  105:    
        1:  106:    if (numFailedTests == 0) {
        1:  107:        printf("All tests for %s PASSED\n", TESTCARD);
        -:  108:    }
        -:  109:    else {
    #####:  110:        printf("Number of Tests Failed: %d\n", numFailedTests);
        -:  111:    }
        -:  112:
        1:  113:    return 0;
        -:  114:}

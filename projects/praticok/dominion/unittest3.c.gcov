        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#define TESTFUNCTION "playCard()"
        -:   10:
        -:   11:// Counters for number of tests and failed tests
        -:   12:int numFailedTests = 0;
        -:   13:int numTests = 0;
        -:   14:
        -:   15:// custom assert 
        8:   16:void assertTF(int value1, int value2) {
        8:   17:    if (value1 == value2) {
        8:   18:        printf("PASSED\n");
        -:   19:    }
        -:   20:    else {
    #####:   21:        printf("FAILED\n");
    #####:   22:        numFailedTests++;
        -:   23:    }
        8:   24:}
        -:   25:
        1:   26:int main () {
        1:   27:    int numPlayers = 2;
        1:   28:    int player0 = 0;
        1:   29:    int handPos = 0;
        -:   30:    int choice1, choice2, choice3;
        1:   31:    choice1 = choice2 = choice3 = 0; 
        -:   32:
        -:   33:    // kingdom cards in use
        1:   34:    int k[10] = {adventurer, minion, feast, gardens, mine,
        -:   35:               tribute, smithy, village, baron, treasure_map};
        -:   36:
        1:   37:    int seed = 99;
        -:   38:
        -:   39:    // state to use for init game 
        -:   40:    struct gameState state;
        -:   41:
        -:   42:    // create a game state
        1:   43:    initializeGame(numPlayers, k, seed, &state);
        -:   44:
        1:   45:    printf("----------------- Testing Function: %s ----------------\n", TESTFUNCTION);
        -:   46:    
        -:   47:    // TEST 1: Test when it is not the play phase of the game
        1:   48:    numTests++;
        1:   49:    printf("\nTEST 1: Not play phase, should return -1\n");
        1:   50:    printf("Not play phase: ");
        1:   51:    state.phase = 1;
        1:   52:    assertTF(playCard(handPos, choice1, choice2, choice3, &state), -1);
        -:   53:
        -:   54:    // clean-up
        1:   55:    state.phase = 0;
        -:   56:
        -:   57:    // TEST 2: Not enough actions left to play cards
        1:   58:    numTests++;
        1:   59:    printf("\nTEST 2: No actions left to play cards, should return -1\n");
        1:   60:    printf("No actions left to play: ");
        1:   61:    state.numActions = 0;
        1:   62:    assertTF(playCard(handPos, choice1, choice2, choice3, &state), -1);
        -:   63:
        -:   64:    // clean-up
        1:   65:    state.numActions = 4;
        -:   66:
        -:   67:    // TEST 3: Test that the card chosen to play is an action card
        1:   68:    numTests++;
        1:   69:    printf("\nTEST 3: Card chosen to play is an action card\n");
        1:   70:    state.hand[player0][0] = adventurer;
        1:   71:    state.hand[player0][1] = treasure_map;
        1:   72:    state.hand[player0][2] = province;
        1:   73:    state.hand[player0][3] = curse;
        1:   74:    state.hand[player0][4] = treasure_map;
        1:   75:    printf("Play adventurer: ");
        1:   76:    assertTF(playCard(0, choice1, choice2, choice3, &state), 0);
        1:   77:    printf("Play treasure_map: ");
        1:   78:    assertTF(playCard(1, choice1, choice2, choice3, &state), 0);
        1:   79:    printf("Play province (returns -1): ");
        1:   80:    assertTF(playCard(2, choice1, choice2, choice3, &state), -1);
        1:   81:    printf("Play curse (returns -1): ");
        1:   82:    assertTF(playCard(3, choice1, choice2, choice3, &state), -1);
        -:   83:
        -:   84:    // clean-up
        1:   85:    state.numActions = 1;
        -:   86:    
        -:   87:    // TEST 4: Play Gardens to have call to cardEffect return -1
        1:   88:    numTests++;
        1:   89:    printf("\nTEST 4: Play Gardens to test cardEffect branch, should return -1\n");
        1:   90:    state.hand[player0][4] = gardens;
        1:   91:    printf("Play gardens (returns -1): ");
        1:   92:    assertTF(playCard(5, choice1, choice2, choice3, &state), -1);
        -:   93:
        -:   94:    // clean-up
        1:   95:    state.numActions = 4;
        -:   96:
        -:   97:    // TEST 5: Test that number of actions is decreased by one after card played
        1:   98:    numTests++;
        1:   99:    printf("\nTEST 5: Number of actions decremented after card played\n");
        1:  100:    printf("Number of actions decremented: ");
        1:  101:    playCard(handPos, choice1, choice2, choice3, &state);
        1:  102:    assertTF(state.numActions, 3);
        -:  103:
        -:  104:
        1:  105:    printf("\n----End Tests for %s----\n", TESTFUNCTION);
        1:  106:    printf("\nNumber of Tests Ran: %d\n", numTests);
        -:  107:    
        1:  108:    if (numFailedTests == 0) {
        1:  109:        printf("All tests for %s PASSED\n", TESTFUNCTION);
        -:  110:    }
        -:  111:    else {
    #####:  112:        printf("Number of Tests Failed: %d\n", numFailedTests);
        -:  113:    }
        -:  114:
        1:  115:    return 0;
        -:  116:}

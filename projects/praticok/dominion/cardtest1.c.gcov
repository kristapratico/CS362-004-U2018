        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#define TESTCARD "smithy"
        -:   10:
        -:   11:// Counters for tests and failed tests
        -:   12:int numFailedTests = 0;
        -:   13:int numTests = 0;
        -:   14:
        -:   15:// custom assert 
       17:   16:void assertTF(int value1, int value2) {
       17:   17:    if (value1 == value2) {
       15:   18:        printf("PASSED\n");
        -:   19:    }
        -:   20:    else {
        2:   21:        printf("FAILED\n");
        2:   22:        numFailedTests++;
        -:   23:    }
       17:   24:}
        -:   25:
        1:   26:int main () {
        1:   27:    int numPlayers = 2;
        1:   28:    int player0 = 0;
        1:   29:    int player1 = 1;
        1:   30:    int handPos = 0;
        -:   31:    int choice1, choice2, choice3;
        1:   32:    choice1 = choice2 = choice3 = 0;
        1:   33:    int bonus = 0;
        -:   34:
        -:   35:    // kingdom cards in use
        1:   36:    int k[10] = {adventurer, minion, feast, gardens, mine,
        -:   37:               tribute, smithy, village, baron, council_room};
        -:   38:
        1:   39:    int seed = 99;
        -:   40:
        -:   41:    // state to use for init game and beginningState to check if state changed
        -:   42:    struct gameState state, beginningState;
        -:   43:
        -:   44:    // create a game state
        1:   45:    initializeGame(numPlayers, k, seed, &state);
        -:   46:
        1:   47:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   48:
        -:   49:    // TEST 1: Current player receives exactly 3 cards
        1:   50:    numTests++;
        1:   51:    printf("TEST 1: Player0 plays smithy and receives exactly 3 cards\n");
        -:   52:
        1:   53:    memcpy(&beginningState, &state, sizeof(struct gameState));
        1:   54:    cardEffect(smithy, choice1, choice2, choice3, &state, handPos, &bonus);
        -:   55:
        1:   56:    printf("Player0 gains 3 cards: ");
        -:   57:    // check for +2 cards in hand because the smithy card is discarded
        1:   58:    assertTF(state.handCount[player0], beginningState.handCount[player0] + 2);
        -:   59:
        -:   60:    // TEST 2: Current player gains 3 cards from his own pile
        1:   61:    numTests++;
        1:   62:    printf("\nTEST 2: Player0 gains 3 cards from his own pile\n");
        1:   63:    printf("Player0 drew 3 cards from his own pile: ");
        1:   64:    assertTF(state.deckCount[player0], beginningState.deckCount[player0] - 3);
        -:   65:
        -:   66:    // TEST 3: No state change occurs for other player
        1:   67:    numTests++;
        1:   68:    printf("\nTEST 3: No state change occurs for player1\n");
        1:   69:    printf("Player1 hand count was not changed: ");
        1:   70:    assertTF(state.handCount[player1], beginningState.handCount[player1]);
        1:   71:    printf("\nPlayer1 deck count was not changed: ");
        1:   72:    assertTF(state.deckCount[player1], beginningState.deckCount[player1]);
        -:   73:
        -:   74:    // TEST 4: No state change occurs to the victory card piles
        1:   75:    numTests++;
        1:   76:    printf("\nTEST 4: No state change occurs to victory card piles\n");
        1:   77:    printf("Estate pile unchanged: ");
        1:   78:    assertTF(state.supplyCount[estate], beginningState.supplyCount[estate]);
        1:   79:    printf("\nDuchy pile unchanged: ");
        1:   80:    assertTF(state.supplyCount[duchy], beginningState.supplyCount[duchy]);
        1:   81:    printf("\nProvince pile unchanged: ");
        1:   82:    assertTF(state.supplyCount[province], beginningState.supplyCount[province]);
        -:   83:
        -:   84:    // TEST 5: No state change occurs to the kingdom card piles
        1:   85:    numTests++;
        1:   86:    printf("\nTEST 5: No state change occurs to kingdom card piles\n");
       11:   87:    for (int x = 0; x < 10; x++) {
       10:   88:        assertTF(state.supplyCount[k[x]], beginningState.supplyCount[k[x]]);
        -:   89:    }
        -:   90:
        1:   91:    printf("----End Tests for %s----\n", TESTCARD);
        1:   92:    printf("\nNumber of Tests Ran: %d\n", numTests);
        -:   93:    
        1:   94:    if (numFailedTests == 0) {
    #####:   95:        printf("All tests for %s PASSED\n", TESTCARD);
        -:   96:    }
        -:   97:    else {
        1:   98:        printf("Number of Tests Failed: %d\n", numFailedTests);
        -:   99:    }
        -:  100:
        1:  101:    return 0;
        -:  102:}

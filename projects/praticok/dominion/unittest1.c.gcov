        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#define TESTFUNCTION "isGameOver()"
        -:   10:
        -:   11:// Counters for number of tests and failed tests
        -:   12:int numFailedTests = 0;
        -:   13:int numTests = 0;
        -:   14:
        -:   15:// custom assert 
        6:   16:void assertTF(int value1, int value2) {
        6:   17:    if (value1 == value2) {
        5:   18:        printf("PASSED\n");
        -:   19:    }
        -:   20:    else {
        1:   21:        printf("FAILED\n");
        1:   22:        numFailedTests++;
        -:   23:    }
        6:   24:}
        -:   25:
        1:   26:int main () {
        1:   27:    int numPlayers = 2;
        1:   28:    int gameOver = 1;
        1:   29:    int gameInProgress = 0;
        -:   30:
        -:   31:    // kingdom cards in use
        1:   32:    int k[10] = {adventurer, minion, feast, gardens, mine,
        -:   33:               tribute, smithy, village, baron, treasure_map};
        -:   34:
        1:   35:    int seed = 99;
        -:   36:
        -:   37:    // state to use for init game and beginningState to check if state changed
        -:   38:    struct gameState state;
        -:   39:
        -:   40:    // create a game state
        1:   41:    initializeGame(numPlayers, k, seed, &state);
        -:   42:
        1:   43:    printf("----------------- Testing Function: %s ----------------\n", TESTFUNCTION);
        -:   44:    
        -:   45:    // TEST 1: Game just begun, no plays happened yet
        1:   46:    numTests++;
        1:   47:    printf("\nTEST 1: Game just initialized, check if game is over\n");
        1:   48:    printf("Game is not over: ");
        1:   49:    assertTF(isGameOver(&state), gameInProgress);
        -:   50:
        -:   51:    // TEST 2: Province pile is empty
        1:   52:    numTests++;
        1:   53:    printf("\nTEST 2: Province pile is empty, game is over\n");
        1:   54:    printf("Game is over: ");
        1:   55:    state.supplyCount[province] = 0;
        1:   56:    assertTF(isGameOver(&state), gameOver);
        -:   57:
        -:   58:    // clean-up
        1:   59:    state.supplyCount[province] = 1;
        -:   60:
        -:   61:    // TEST 3: Three supply piles empty
        1:   62:    numTests++;
        1:   63:    printf("\nTEST 3: Three supply piles empty (edge of loop case), game is over\n");
        1:   64:    printf("Game is over: ");
        1:   65:    state.supplyCount[minion] = 0;
        1:   66:    state.supplyCount[tribute] = 0;
        1:   67:    state.supplyCount[treasure_map] = 0;
        1:   68:    assertTF(isGameOver(&state), gameOver);
        -:   69:
        -:   70:    // clean-up
        1:   71:    state.supplyCount[minion] = 1;
        1:   72:    state.supplyCount[tribute] = 1;
        1:   73:    state.supplyCount[treasure_map] = 1;
        -:   74:
        -:   75:    // TEST 4: Two supply piles empty
        1:   76:    numTests++;
        1:   77:    printf("\nTEST 4: Two supply piles empty, game is in progress\n");
        1:   78:    printf("Game is not over: ");
        1:   79:    state.supplyCount[adventurer] = 0;
        1:   80:    state.supplyCount[smithy] = 0;
        1:   81:    assertTF(isGameOver(&state), gameInProgress);
        -:   82:
        -:   83:    // clean-up
        1:   84:    state.supplyCount[adventurer] = 1;
        1:   85:    state.supplyCount[smithy] = 1;
        -:   86:
        -:   87:    // TEST 5: Non-kingdom card supplies are empty (victory card, treasure, curse)
        1:   88:    numTests++;
        1:   89:    printf("\nTEST 5: Three non-kingdom supplies empty (victory card, treasure, curse) empty, game is over\n");
        1:   90:    printf("Game is over: ");
        1:   91:    state.supplyCount[estate] = 0;
        1:   92:    state.supplyCount[curse] = 0;
        1:   93:    state.supplyCount[silver] = 0;
        1:   94:    assertTF(isGameOver(&state), gameOver);
        -:   95:
        -:   96:    // clean-up
        1:   97:    state.supplyCount[estate] = 1;
        1:   98:    state.supplyCount[curse] = 1;
        1:   99:    state.supplyCount[silver] = 1;
        -:  100:
        -:  101:    // TEST 6: Greater than 3 piles empty (five supply piles empty)
        1:  102:    numTests++;
        1:  103:    printf("\nTEST 6: Five supply piles empty (check > 3), game is over\n");
        1:  104:    printf("Game is over: ");
        1:  105:    state.supplyCount[smithy] = 0;
        1:  106:    state.supplyCount[duchy] = 0;
        1:  107:    state.supplyCount[copper] = 0;
        1:  108:    state.supplyCount[baron] = 0;
        1:  109:    state.supplyCount[mine] = 0;
        1:  110:    assertTF(isGameOver(&state), gameOver);
        -:  111:
        -:  112:
        1:  113:    printf("\n----End Tests for %s----\n", TESTFUNCTION);
        1:  114:    printf("\nNumber of Tests Ran: %d\n", numTests);
        -:  115:    
        1:  116:    if (numFailedTests == 0) {
    #####:  117:        printf("All tests for %s PASSED\n", TESTFUNCTION);
        -:  118:    }
        -:  119:    else {
        1:  120:        printf("Number of Tests Failed: %d\n", numFailedTests);
        -:  121:    }
        -:  122:
        1:  123:    return 0;
        -:  124:}
